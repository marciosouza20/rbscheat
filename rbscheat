#!/bin/bash
#
# This script display the reverse Shell Cheat Sheet by kind select by user.
#   - User also can pass the IP and port to make ajust in script output.
#
# This script use the PentestMonkey reverse Shell Cheat Sheet [1] and
# Reverse-shell-one-liners [2].
#
# [1] http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet
# [2] https://bernardodamele.blogspot.com/2011/09/reverse-shells-one-liners.html
# [3] https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet.md]
# [4] https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md
#
#
# Changelog:
# 0.1: Initial version.
# 0.2: Include bind shell options no cheat
# 0.3: Refactoring code to move bind shell cheats to data files
#
# Autor: Marcio de Souza Oliveira <marciosouza@debian.org>
#        Leonardo Braga <leobraga96@gmail.com>
#        David Polverari <david.polverari@gmail.com>
#        Guilherme <guilhermeglp@gmail.com>
# Licensed by GPL-3

set -e

#Global Variables
VERSION='0.3'
USE="Usage: $(basename $0) -i ip:port -l shell-type"
IP=""
PORT=""
LANGUAGE=""
DATA_DIR="data"

#Default options
DISPLAY_ALL="True"
BIND_SHELL="False"

display_help () {
    echo -e "$USE\n"
    echo "Display reverse shell syntax for supported languages."
    echo
    echo -e "\033[1m OPTIONS \033[m"
    echo "  -h            Display this help"
    echo "  -i IP:PORT    The target IP and port to reverse shell connect"
    echo "  -l shell-type The supported reverse shell kind to display syntax"
    echo "  -b Bind Shell"
    echo "  -v version"
    echo "                                                                  "
    echo -e "\033[1m Are support the following kinds\033[m"
    echo -e "\033[1m Reverse:\033[m bash, netcat, java, perl, php, python2, python3, golang, ruby, powershell|ps, powercat, socat, awk, xterm.\033[m"
    echo -e "\033[1m Bind:\033[m netcat, perl, awk.\033[m"
    echo "                                                                  "
    echo -e "\033[1m SYNOPSIS \033[m"
    echo
    echo -e "  $(basename $0) [ -i ip:port ] [ -l shell-type ] [-b Bind Shell]"
    echo -e "  shell-type -l: bash, netcat|nc, java|jar, perl|pl, php, python|py, ruby|rb, golang|go, powershell|ps, powercat, awk, xterm"
    echo "                                                                  "
}


check_ip () {
        #This function check if received IP is valid
        if [[ "$1" =~ ^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$ ]]
        then
            export IP="$1"
        else
             echo "[!] Error! The received IP is invalid!"
             echo
             display_help && exit 1
        fi
}

check_port () {
        #This function check if received PORT is valid
        if [[ "$1" -gt 0 ]] && [[ "$1" -le 65535 ]]
        then
            export PORT="$1"
        else
             echo "[!] Error! The received PORT is invalid"
             echo
             display_help && exit 1
        fi
}


display_cheat () {
    # Receveid the language and display the correct reverse shell syntax
    if [ "$#" != 0 ]
    then
        lang=${1,,}
        [ $BIND_SHELL == "True" ] && shell="bind" || shell="reverse"

        if [ -f "$DATA_DIR/$shell/$lang" ]; then
            echo -e "\033[31m\033[1m${shell^^} SHELL CHEAT: [$lang]\033[m"
            source "$DATA_DIR/$shell/$lang"
        else
            display_help && exit 1
        fi
    else
            display_help && exit 1
    fi
}


if [ "$#" != 0 ]
then
    while true
    do
        case "$1" in
            -h|--help)
                display_help && exit 0
                ;;
            -v|--version)
                echo "$(basename "$0") version "$VERSION"" && exit 0
                ;;
            -b|--bind)
                export BIND_SHELL="True"
                shift 1
		;;
            -i|--input)
                IFS=':' read IP PORT <<< "$2"
                shift 2
                ;;
            -l|--language)
                LANGUAGE="$2"
                shift 2
                ;;
            -*)
                display_help && exit 1
                ;;
            *)
                if [ "$#" = 0 ]
                then
                    break
                else
                    display_help && exit 3
                fi
                ;;
        esac
    done
else
    display_help && exit 2
fi

# Main execution
if [ "$BIND_SHELL" = "False" ]
then
    check_ip "$IP" && check_port "$PORT"
fi
display_cheat "$LANGUAGE"
